import telebot
import time
from telebot import types
import logging
from pymongo import MongoClient
import json
import sys
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import datetime


class Unbuffered(object):
   def __init__(self, stream):
       self.stream = stream
   def write(self, data):
       self.stream.write(data)
       self.stream.flush()
   def writelines(self, datas):
       self.stream.writelines(datas)
       self.stream.flush()
   def __getattr__(self, attr):
       return getattr(self.stream, attr)


from Music_analyzer.vk_music_analyzer import Vk_music_analyzer
from Music_analyzer.spotify_music_analyzer import Spotify_music_analyzer
from Concerts.yandex_afisha_concerts import Concerts
from bot.city_slovar import City_slovar
import Db.db as db_classes



sys.stdout = Unbuffered(sys.stdout)


CONFIG_FILE = './bot/config.json'

with open(CONFIG_FILE) as conf:
    config = json.load(conf)

bot_config = config['bot_config']
oauth_config = config["oauth_config"]
server_config = config["server_config"]
db_config = config["db_config"]


#engine = create_engine(db_config['sqlite_address'])
#db_session = sessionmaker(bind=engine)()


client = MongoClient(db_config['address'], db_config['port'])
db = client[db_config['name']]
vk_collection = db[db_config['collections']['vk_collection']]
spotify_collection = db[db_config['collections']['spotify_collection']]
vk_oauth_config = oauth_config['vk_oauth_config']
spotify_oauth_config = oauth_config['spotify_oauth_config']


TOKEN = bot_config['token']
bot = telebot.TeleBot(TOKEN)

vk_oauth_url = vk_oauth_config['redirect_url_base']+vk_oauth_config['oauth_startpoint']
spotify_oauth_url = spotify_oauth_config['redirect_url_base']+spotify_oauth_config['oauth_startpoint']


TEXT = "(–µ—Å–ª–∏ —Ç—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –º–Ω–µ —Å–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç - –Ω–∞–ø–∏—à–∏ /start)"


def get_vk_id_from_db(tg_id):
    res = vk_collection.find_one({'_id' : tg_id})
    if res != None:
        vk_collection.delete_one({'_id' : tg_id})
    return res


def get_spotify_id_from_db(tg_id):
    res = spotify_collection.find_one({'_id' : tg_id})
    if res != None:
        spotify_collection.delete_one({'_id' : tg_id})
    return res


def get_info_from_db(mode, tg_id):
    for i in range(50):
        if mode == 0:
            res = get_vk_id_from_db(str(tg_id))
            if res != None:
                return res
        elif mode == 1:
            res = get_spotify_id_from_db(str(tg_id))
            if res != None:
                return res
        time.sleep(5)


#—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def make_keyboard(d):
    keyboard = types.InlineKeyboardMarkup()
    buttons = []
    for i in d.keys():
        buttons.append(types.InlineKeyboardButton(text=d[i][0], callback_data=i))
    keyboard.add(*buttons)
    return keyboard
    
'''
def menu_analyze_proc(message):
    text = "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:"
    bot.send_message(message.chat.id, text=text, reply_markup=make_keyboard(menu_analyze))
    bot.register_next_step_handler(message, menu_analize_keyboard_handler)
    return'''


def change_service():
    return 1


def menu_manage_list_proc(message):
    bot.send_message(message.chat.id, text="—Ö–∞–π–ø")

'''
def menu_send_concerts_proc():
    return 1'''

'''
def menu_reset_proc(message):
    bot.send_message(message.chat.id, text = "—Ö–∞–π–ø")'''

'''
def menu_analyze_spotify_proc(message):
    msg = "–ü–µ—Ä–µ–π–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: "
    msg += spotify_oauth_url+"?&tg_id="+str(message.chat.id)
    msg += "\n\n–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤—Å–µ–≥–æ 4 –º–∏–Ω—É—Ç—ã –∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!"
    ms = bot.send_message(message.chat.id, text=msg)
    db_object = get_info_from_db(1, message.chat.id)
    try:
        print(message.chat.id, "successful authorization")
        token = db_object['spotify_access_token']
        get_info_from_spotify(message, token)
    except TypeError:
        bot.send_message(message.chat.id, text="–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫–ª–æ\n\n–ù–∞—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        print(message.chat.id, "the link has expired ")'''
    
'''
def menu_analyze_vk_proc(message):
    msg = "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —É —Ç–µ–±—è –æ—Ç–∫—Ä—ã—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∞—É–¥–∏–æ!\n\n"
    msg += "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: "
    msg += spotify_oauth_url+"?&tg_id="+str(message.chat.id)
    msg += "\n\n–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤—Å–µ–≥–æ 4 –º–∏–Ω—É—Ç—ã –∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!"
    bot.send_message(message.chat.id, text=msg)
    db_object = get_info_from_db(0, message.chat.id)
    try:
        print(message.chat.id, db_object)
        vk_id = db_object['vk_id']
        get_info_from_vk(message, vk_id)
    except TypeError:
        bot.send_message(message.chat.id, text="–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫–ª–æ\n\n–ù–∞—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        print(message.chat.id, "the link has expired ")'''

'''
def menu_change_service_proc(message):
    txt = "—Ö–∞–π–ø"
    bot.send_message(message.chat.id, text=txt, reply_markup=make_keyboard(menu_change_service))'''


def menu_startup_vk_proc(message):
    txt = "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —É —Ç–µ–±—è –æ—Ç–∫—Ä—ã—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∞—É–¥–∏–æ!\n\n"
    txt += "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: "
    txt += vk_oauth_url+"?&tg_id="+str(message.chat.id)
    txt += "\n\n–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤—Å–µ–≥–æ 4 –º–∏–Ω—É—Ç—ã –∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!"
    msg = bot.send_message(message.chat.id, text=txt)
    db_object = get_info_from_db(0, message.chat.id)
    try:
        vk_id = db_object['vk_id']
        txt = "–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç...\n\n"
        txt += "–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 5-7 –º–∏–Ω—É—Ç."
        bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id, text=txt)
        print(message.chat.id, db_object)
        get_info_from_vk(message, vk_id)
    except TypeError:
        bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id, text="–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫–ª–æ\n\n–ù–∞—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        print(message.chat.id, "the link has expired ")

    
def menu_startup_spotify_proc(message):
    txt = "–ü–µ—Ä–µ–π–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: "
    txt += spotify_oauth_url+"?&tg_id="+str(message.chat.id)
    txt += "\n\n–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤—Å–µ–≥–æ 4 –º–∏–Ω—É—Ç—ã –∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!"
    msg = bot.send_message(message.chat.id, text=txt)
    db_object = get_info_from_db(1, message.chat.id)
    try:
        token = db_object['spotify_access_token']
        bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id, text="–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç...")
        get_info_from_spotify(message, token)
        print(message.chat.id, "successful authorization")
    except TypeError:
        bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id, text="–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫–ª–æ\n\n–ù–∞—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        print(message.chat.id, "the link has expired ")
    

#—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∞–π–∫–æ–º    
def menu_like_proc(message):
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=total_recall(message), parse_mode='markdown')
    

#—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∞–π–∫–æ–º
def total_recall(message):
    s = message.text
    title = s.split('\n')[0][s.index(' ', 0, len(s.split('\n')[0]))+1:len(s.split('\n')[0])]
    date = s.split('\n')[1][7:len(s.split('\n')[1])]
    place = s.split('\n')[2][5:len(s.split('\n')[2])]
    url = message.json.get('entities')[0].get('url')
    new_text = "–ö–æ–Ω—Ü–µ—Ä—Ç [{t}]({u})\n–ö–æ–≥–¥–∞: *{d}*\n–ì–¥–µ: *{p}*".format(p = place,
                        t = title,
                        d = date,
                        u = url)
    try:
        new_text += "\n{p}".format(p = s.split('\n')[3])
    except IndexError:
        pass
    return new_text 


'''menu_change_service = {
    'btn_menu_analize_vk' : ('Vk', menu_analyze_vk_proc),
    'btn_menu_analize_spotify' : ('Spotify', menu_analyze_spotify_proc)
}'''


menu = {
    #'btn_menu_change_service' : ('–î—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å', menu_change_service_proc), 
    'btn_menu_manage_list' : ('–û–±–Ω–æ–≤–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç', menu_manage_list_proc),
    #'btn_menu_send_concerts' : ('–ü—Ä–∏—Å–ª–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã', menu_send_concerts_proc),
    #'btn_menu_reset' : ('–°—Ç–µ—Ä–µ—Ç—å', menu_reset_proc)
    #'btn_menu_abort' : ('–í—ã–±–µ—Ä—É –ø–æ—Ç–æ–º', menu_abort_proc)
}


#–Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
menu_startup = {
    'btn_menu_startup_vk' : ('Vk', menu_startup_vk_proc),
    'btn_menu_startup_spotify' : ('Spotify', menu_startup_spotify_proc)
}


menu_like = {
    'btn_menu_like' : ('üëç', menu_like_proc)
}


@bot.message_handler(commands=['start'])
def send_welcome(message):
    txt = "–ú–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ—é –º–µ–¥–∏–∞—Ç–µ–∫—É, –ø–æ—ç—Ç–æ–º—É –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"
    #text3 = –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é - –Ω–∞–ø–∏—à–∏ /menu
    print(message.chat.id, message.from_user.username)
    msg = bot.send_message(message.chat.id, text=txt, reply_markup=make_keyboard(menu_startup))
    #new_msg = bot.edit_message_reply_markup(chat_id = message.chat.id, message_id = msg.message_id)

'''
@bot.message_handler(commands=['menu'])
def handle_menu(message):
    text1 = "–≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é!\n\n"
    #text2 = "–ï—Å–ª–∏ —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∏ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª, –Ω–∞–∂–º–∏ –î–†–£–ì–û–ô –°–ï–†–í–ò–°\n\n"
    text3 = "–ï—Å–ª–∏ —Ç–≤–æ–∏ –≤–∫—É—Å—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —Ç—ã –¥–æ–±–∞–≤–∏–ª –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —ç—Ç–æ —É—á–µ–ª, –Ω–∞–∂–º–∏ –û–ë–ù–û–í–ò–¢–¨ –ü–õ–ï–ô–õ–ò–°–¢\n\n"
    #text4 = "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å—Ç–µ—Ä—Ç—ã, –Ω–∞–∂–º–∏ –°–¢–ï–†–ï–¢–¨\n\n"
    text5 = "(–µ—Å–ª–∏ —Ç—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –º–Ω–µ —Å–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç, –Ω–∞–ø–∏—à–∏ /start)"
    bot.send_message(message.chat.id, text=text1+text2+text3+text5, reply_markup=make_keyboard(menu))
    #bot.register_next_step_handler(message, menu_keyboard_handler)'''


#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types = ["text", "sticker", "pinned_message", "photo", "audio"])
def talk(message):
    txt = "–ú—ã –º–æ–≥–ª–∏ –±—ã –ø–æ–æ–±—â–∞—Ç—å—Å—è, –Ω–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ —á—Ç–æ —è —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç)\n"
    txt += "–û–¥–Ω–∞–∫–æ —Å–∫–æ—Ä–æ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –Ω–∞—É—á–∏—Ç –º–µ–Ω—è –µ—â–µ —á–µ–º—É-–Ω–∏–±—É–¥—å)\n\n" + TEXT
    bot.send_message(message.chat.id, text=txt)


@bot.callback_query_handler(func=lambda call: type(call)==types.CallbackQuery and call.data in menu_like.keys())
def menu_like_keyboard_handler(call):
    btn = call.data
    print(call.from_user.id, btn)
    if menu_like.get(btn) != None:
        menu_like[btn][1](call.message)
           
        
@bot.callback_query_handler(func=lambda call: type(call)==types.CallbackQuery and call.data in menu.keys())
def menu_keyboard_handler(call):
    btn = call.data
    print(call.from_user.id, btn)
    if menu.get(btn) != None:
        menu[btn][1](call.message)


@bot.callback_query_handler(func=lambda call: type(call)==types.CallbackQuery and call.data in menu_startup.keys())
def menu_startup_keyboard_handler(call):
    btn = call.data
    print(call.from_user.id, btn)
    if menu_startup.get(btn) != None:
        menu_startup[btn][1](call.message)

'''    
@bot.callback_query_handler(func=lambda call: type(call)==types.CallbackQuery and call.data in menu_change_service.keys())
def menu_change_service_keyboard_handler(call):
    btn = call.data
    print(call.from_user.id, btn)
    if menu_change_service.get(btn) != None:
        menu_change_service[btn][1](call.message)'''


#—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥
def get_nearest_city_by_location(user_lat, user_long):
    coordinates = City_slovar()
    return coordinates.nearest_city_by_location(user_lat, user_long) 


#—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ä–æ–¥
def get_city_by_name(city):
    name = City_slovar()
    return name.city_by_name(city)


#—Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
def location_reply_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    button = types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é!', request_location=True)
    markup.add(button)
    return markup

'''
#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ—á–∫–∏ —Ö–æ—á—É –µ—â—ë
def location_reply_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard = False)
    button = types.KeyboardButton(text = '–•–æ—á—É –µ—â—ë!', )
    markup.add(button)
    return markup'''


def get_info_from_vk(message, vk_id): 
    try:    
        vk = Vk_music_analyzer()

        #work = vk.get_favourite_artists(vk_id)
        #print(type(work))
        #artists = work.result()
        artists = vk.get_favourite_artists(vk_id)
        if artists == []:
            bot.send_message(message.chat.id, text="–û—Ö, –∫–∞–∂–µ—Ç—Å—è, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Å–µ–Ω –≤ VK...")
            print(message.chat.id, 'no songs in vk')
        else:
            txt = "–ü–æ–¥–µ–ª–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π, —á—Ç–æ–±—ã —è –ø–æ–∫–∞–∑–∞–ª –∫–æ–Ω—Ü–µ—Ä—Ç—ã –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º —Ç–µ–±—è –≥–æ—Ä–æ–¥–µ!\n\n"
            txt += "–¢—ã –º–æ–∂–µ—à—å —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä \'–ú–æ—Å–∫–≤–∞\' –∏–ª–∏ \'–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\')"
            msg = bot.send_message(message.chat.id, text=txt, reply_markup=location_reply_keyboard())
            bot.register_next_step_handler(message, lambda msg: location_handler(msg, artists))
            print(message.chat.id, "send to identify location")
    except Exception as e:
        if str(e) == 'You don\'t have permissions to browse {}\'s albums'.format(vk_id):
            txt = "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —É —Ç–µ–±—è –≤—Å–µ-—Ç–∞–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ –∞—É–¥–∏–æ(\n\n"
            txt += "–ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ –µ—â–µ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!"
            bot.send_message(message.chat.id, text=txt)
            print(message.chat.id, "closed account")
        else:
            raise Exception
            #bot.send_message(message.chat.id, text="–ß—Ç–æ-—Ç–æ —Ç—É—Ç –Ω–µ —Ç–∞–∫! —Ö–º-—Ö–º")
            #print(message.chat.id, "something happen")
   
    
def get_info_from_spotify(message, token):
    sp = Spotify_music_analyzer()
    
    #work = sp.get_favourite_artists(token)
    #print(type(work))
    #artists = work.result()
    artists = sp.get_favourite_artists(token)
    if artists == []:
        bot.send_message(message.chat.id, text="–û—Ö, –∫–∞–∂–µ—Ç—Å—è, —É —Ç–µ–±—è –Ω–µ—Ç –ø–µ—Å–µ–Ω –≤ spotify...")
        print(message.chat.id, 'no songs in spotify')
    else:
        txt = "–ü–æ–¥–µ–ª–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π, —á—Ç–æ–±—ã —è –ø–æ–∫–∞–∑–∞–ª –∫–æ–Ω—Ü–µ—Ä—Ç—ã –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º —Ç–µ–±—è –≥–æ—Ä–æ–¥–µ!\n\n"
        txt += "–¢—ã –º–æ–∂–µ—à—å —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä \'–ú–æ—Å–∫–≤–∞\' –∏–ª–∏ \'–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\')"
        msg = bot.send_message(message.chat.id, text=txt, reply_markup=location_reply_keyboard())
        bot.register_next_step_handler(message, lambda msg: location_handler(msg, artists))
        print(message.chat.id, "send to identify location")    
      

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@bot.message_handler(content_types=["location", "text"])
def location_handler(message, artists=None):
    keyboard = types.ReplyKeyboardRemove()
    if artists is None:
        bot.send_message(message.chat.id, text="–∞–≥–∞, —Ö–∞–π–ø", reply_markup=keyboard)
    else:
        try:
            lat = message.location.latitude
            long = message.location.longitude
            nearest_city = get_nearest_city_by_location(lat, long)
            nearest_city_rus = list(nearest_city.keys())[0]
            print(message.chat.id, "city " + nearest_city[nearest_city_rus])
            txt = "–¢–≤–æ–π –≥–æ—Ä–æ–¥ - {city}\n\n".format(city = nearest_city_rus)
            txt += "–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–æ–∂–¥–∞—Ç—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å, —è –ø–æ–¥–±–∏—Ä–∞—é –¥–ª—è —Ç–µ–±—è –∫–æ–Ω—Ü–µ—Ä—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 4 –º–µ—Å—è—Ü–∞)"
            #msg += "\n\n–ê –ø–æ–∫–∞, –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à [–∫–∞–Ω–∞–ª](https://t.me/musicgeekinfo), –≥–¥–µ –º–æ–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ "
            #msg += "—Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é—Ç –æ —Å–≤–æ—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –æ–ø–æ–≤–µ—â–∞—é—Ç –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö"
            bot.send_message(message.chat.id, text=txt, parse_mode='markdown', reply_markup=keyboard)
            show_concerts(message, artists, nearest_city[nearest_city_rus])
        except AttributeError:
            if message.text == '/start':
                send_welcome(message)
            else:
                try:
                    city = get_city_by_name(message.text)
                    print(message.chat.id, "city " + city)
                    txt = "–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–æ–∂–¥–∞—Ç—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å, —è –ø–æ–¥–±–∏—Ä–∞—é –¥–ª—è —Ç–µ–±—è –∫–æ–Ω—Ü–µ—Ä—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 4 –º–µ—Å—è—Ü–∞)"
                    #msg += "\n\n–ê –ø–æ–∫–∞, –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à [–∫–∞–Ω–∞–ª](https://t.me/musicgeekinfo), –≥–¥–µ –º–æ–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ "
                    #msg += "—Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é—Ç –æ —Å–≤–æ—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –æ–ø–æ–≤–µ—â–∞—é—Ç –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö"
                    bot.send_message(message.chat.id, text=txt, parse_mode='markdown', reply_markup=keyboard)
                    show_concerts(message, artists, city)
                except ValueError:
                    txt = "–í–æ–∑–º–æ–∂–Ω–æ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –µ—â–µ –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ, –ª–∏–±–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª –µ–≥–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ(\n\n"
                    txt += "–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â–µ —Ä–∞–∑, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"
                    print(message.chat.id, 'wrong city name or no city in our base')
                    bot.send_message(message.chat.id, text=txt)
                    bot.register_next_step_handler(message, lambda msg: location_handler(msg, artists))


#—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–∞—Ä—Å–∏—Ç –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é    
def show_concerts(message, artists, nearest_city):
    con = Concerts()
    con.load_concerts(city=nearest_city, number_of_days=122)
    concert_list = []
    for i in range(len(artists)):
        concert = con.find_concerts(artists[i])
        if concert != []:
            if concert not in concert_list:
                txt = "–ö–æ–Ω—Ü–µ—Ä—Ç [{title}]({url})\n–ö–æ–≥–¥–∞: *{date}*\n–ì–¥–µ: *{place}*".format(place = concert[0]['place'],
                                              title = concert[0]['title'],
                                              date = concert[0]['date'],
                                              url = concert[0]['url'])
                if concert[0]['price'] != None:
                    txt += "\n–ë–∏–ª–µ—Ç—ã –æ—Ç {price} —Ä—É–±–ª–µ–π".format(price = concert[0]['price'])
                if concert[0]['price'] == None:
                    pass
                bot.send_message(message.chat.id, text=txt, parse_mode='markdown', reply_markup=make_keyboard(menu_like))
                concert_list.append(concert)
                time.sleep(4)
            else:
                pass
    print(message.chat.id, "{0} concerts were sent".format(len(concert_list)))
    if len(concert_list) != 0:
        txt = "–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è)\n\n–¢—ã –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –ø–æ–º–æ–∂–µ—à—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π, "
        txt += "–µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏—à—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ [—ç—Ç–æ–π –≥—É–≥–ª-—Ñ–æ—Ä–º–µ](https://forms.gle/GrfATEJFfy5BrAqm9)"
        txt += "\n\n–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –ø—Ä–∏—Å–ª–∞–ª –µ—â–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã, –Ω–∞–ø–∏—à–∏ /start"
        bot.send_message(message.chat.id, text=txt, parse_mode='markdown')
    else:
        time.sleep(4)
        txt = "–û—Ö, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–±–æ–π –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è(\n\n–í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Ç—ã "
        txt += "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –ø–æ–º–æ–∂–µ—à—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏—à—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ [—ç—Ç–æ–π –≥—É–≥–ª-—Ñ–æ—Ä–º–µ](https://forms.gle/GrfATEJFfy5BrAqm9)"
        txt += "\n\n–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –ø—Ä–∏—Å–ª–∞–ª –µ—â–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã, –Ω–∞–ø–∏—à–∏ /start"
        bot.send_message(message.chat.id, text=txt, parse_mode='markdown')

#logger = telebot.logger
#telebot.logger.setLevel(logging.DEBUG)
bot.polling(none_stop=True)
